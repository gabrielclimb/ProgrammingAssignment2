stop(print("invalid state"))
}
#second, outcome
else if (!outcome %in% outcome_list){
stop(print("invalid outcome"))
}
#filtering hospital dataset by state name
hospital_filtered  <- subset(hospital_data, State == state)
if (outcome == "heart attack") {
outcome_column <- 11
}
else if (outcome == "heart failure") {
outcome_column <- 17
}
else if (outcome == "pneumonia") {
outcome_column <- 23
}
#taking out NA values for the column
column_desired  <- as.numeric(hospital_filtered[, outcome_column])
is_Na <- is.na(column_desired)
desired_hospital_filtered <- hospital_filtered[!is_Na,]
#converting to a numeric to order
desired_hospital_filtered[,outcome_column]  <- sapply(desired_hospital_filtered[,outcome_column], as.numeric)
#find the hospitals in the rows with the minimum outcome value
columns_considered <- as.numeric(desired_hospital_filtered[, outcome_column])
columns_names  <- as.character(desired_hospital_filtered[, 2])
desired_hospitals_ordered  <- desired_hospital_filtered[with(order(desired_hospital_filtered[outcome_column],desired_hospital_filtered[2])),]
#if there are multiple hospitals with the minimum outcome value, then
#return the first hospital name from the alphabetically sorted hospital
#names list
if (num == "best") {
desired_hospitals_ordered[1,2]
}
else if (num == "worst") {
desired_hospitals_ordered[length(desired_hospitals_ordered),2]
}
else {
desired_hospitals_ordered[num,2]
}
}
rankhospital("TX", "heart failure", 4)
hospital_sortes  <-  hospital_sortes[with(hospital_sortes, order(hospital_sortes$heart.failure, hospital_sortes$Hospital.Name)),]
rankhospital  <- function(state, outcome, num = "best")
{
#Read outcome
setwd( "/Users/gabrielsoares/Documents/Curso Data Analysis/rprog-data-ProgAssignment3-data")
hospital_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
#state list
state_list <- unique(hospital_data[,7])
#outcome list
outcome_list  <- c("heart attack","heart failure", "pneumonia")
#checking variables
#first, state
if (!state %in% state_list){
stop(print("invalid state"))
}
#second, outcome
else if (!outcome %in% outcome_list){
stop(print("invalid outcome"))
}
#filtering hospital dataset by state name
hospital_filtered  <- subset(hospital_data, State == state)
if (outcome == "heart attack") {
outcome_column <- 11
}
else if (outcome == "heart failure") {
outcome_column <- 17
}
else if (outcome == "pneumonia") {
outcome_column <- 23
}
#taking out NA values for the column
column_desired  <- as.numeric(hospital_filtered[, outcome_column])
is_Na <- is.na(column_desired)
desired_hospital_filtered <- hospital_filtered[!is_Na,]
#converting to a numeric to order
desired_hospital_filtered[,outcome_column]  <- sapply(desired_hospital_filtered[,outcome_column], as.numeric)
#find the hospitals in the rows with the minimum outcome value
columns_considered <- as.numeric(desired_hospital_filtered[, outcome_column])
columns_names  <- as.character(desired_hospital_filtered[, 2])
desired_hospitals_ordered  <- desired_hospital_filtered[with(desired_hospital_filtered,order(desired_hospital_filtered[outcome_column],desired_hospital_filtered[2])),]
#if there are multiple hospitals with the minimum outcome value, then
#return the first hospital name from the alphabetically sorted hospital
#names list
if (num == "best") {
desired_hospitals_ordered[1,2]
}
else if (num == "worst") {
desired_hospitals_ordered[length(desired_hospitals_ordered),2]
}
else {
desired_hospitals_ordered[num,2]
}
}
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
setwd( "/Users/gabrielsoares/Documents/Curso Data Analysis/rprog-data-ProgAssignment3-data")
hospital_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outcome_list  <- c("heart attack","heart failure", "pneumonia")
hospital_filtered  <- subset(hospital_data, State == "MD")
column_desired  <- as.numeric(hospital_filtered[, 1])
column_desired  <- as.numeric(hospital_filtered[, 11])
View(hospital_filtered)
View(hospital_filtered)
is_Na <- is.na(column_desired)
desired_hospital_filtered <- hospital_filtered[!is_Na,]
desired_hospital_filtered[,11]  <- sapply(desired_hospital_filtered[,11], as.numeric)
columns_considered <- as.numeric(desired_hospital_filtered[, 11])
columns_names  <- as.character(desired_hospital_filtered[, 2])
desired_hospitals_ordered  <- desired_hospital_filtered[with(desired_hospital_filtered,order(desired_hospital_filtered[11],desired_hospital_filtered[2])),]
View(desired_hospitals_ordered)
desired_hospitals_ordered[length(desired_hospitals_ordered),2]
length(desired_hospitals_ordered)
class(desired_hospitals_ordered)
summary(desired_hospitals_ordered)
desired_hospitals_ordered[length(desired_hospitals_ordered[11]),2]
length(desired_hospitals_ordered[11])
length(desired_hospitals_ordered[,11])
desired_hospitals_ordered[length(desired_hospitals_ordered[,11]),2]
rankhospital  <- function(state, outcome, num = "best")
{
#Read outcome
setwd( "/Users/gabrielsoares/Documents/Curso Data Analysis/rprog-data-ProgAssignment3-data")
hospital_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
#state list
state_list <- unique(hospital_data[,7])
#outcome list
outcome_list  <- c("heart attack","heart failure", "pneumonia")
#checking variables
#first, state
if (!state %in% state_list){
stop(print("invalid state"))
}
#second, outcome
else if (!outcome %in% outcome_list){
stop(print("invalid outcome"))
}
#filtering hospital dataset by state name
hospital_filtered  <- subset(hospital_data, State == state)
if (outcome == "heart attack") {
outcome_column <- 11
}
else if (outcome == "heart failure") {
outcome_column <- 17
}
else if (outcome == "pneumonia") {
outcome_column <- 23
}
#taking out NA values for the column
column_desired  <- as.numeric(hospital_filtered[, outcome_column])
is_Na <- is.na(column_desired)
desired_hospital_filtered <- hospital_filtered[!is_Na,]
#converting to a numeric to order
desired_hospital_filtered[,outcome_column]  <- sapply(desired_hospital_filtered[,outcome_column], as.numeric)
#find the hospitals in the rows with the minimum outcome value
columns_considered <- as.numeric(desired_hospital_filtered[, outcome_column])
columns_names  <- as.character(desired_hospital_filtered[, 2])
desired_hospitals_ordered  <- desired_hospital_filtered[with(desired_hospital_filtered,order(desired_hospital_filtered[outcome_column],desired_hospital_filtered[2])),]
#if there are multiple hospitals with the minimum outcome value, then
#return the first hospital name from the alphabetically sorted hospital
#names list
if (num == "best") {
desired_hospitals_ordered[1,2]
}
else if (num == "worst") {
desired_hospitals_ordered[length(desired_hospitals_ordered[,outcome_column]),2]
}
else {
desired_hospitals_ordered[num,2]
}
}
rankhospital("MD", "heart attack", "worst")
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
setwd( "/Users/gabrielsoares/Documents/Curso Data Analysis/rprog-data-ProgAssignment3-data")
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcome)
outcome[, 11] <- as.numeric(outcome[, 11])
hist(outcome[, 11])
best  <- function(state, outcome){
#Read outcome
setwd( "/Users/gabrielsoares/Documents/Curso Data Analysis/rprog-data-ProgAssignment3-data")
hospital_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
#state list
state_list <- uninque(hospital_data[,7])
#outcome list
outcome_list  <- c("heart attack","heart failure", "pneumonia")
#checking variables
if (!state %in% state_list){
stop(print("invalid state"))
}
else if (!outcome %in% outcome_list){
stop(print("invalid outcome"))
}
#filtering hospital dataset by state name
hospital_filtered  <- subset(hospital_data, State == state)
if (outcome == "heart attack") {
outcome_column <- 11
}
else if (outcome == "heart failure") {
outcome_column <- 17
}
else if (outcome == "pneumonia") {
outcome_column <- 23
}
#taking out NA values for the column
column_desired  <- as.numeric(hospital_filtered[, outcome_column])
is_Na <- is.na(column_desired)
desired_hospital_filtered <- hospital_filtered[!is_Na,]
#find the hospitals in the rows with the minimum outcome value
columns_considered <- as.numeric(desired_hospital_filtered[, outcome_column])
desired_rows <- which(columns_considered == min(columns_considered))
desired_hospitals <- desired_hospital_filtered[desired_rows, 2]
#if there are multiple hospitals with the minimum outcome value, then
#return the first hospital name from the alphabetically sorted hospital
#names list
if (length(desired_hospitals) > 1) {
hospitals_sorted <- sort(desired_hospitals)
hospitals_sorted[1]
}
else {
desired_hospitals
}
}
best("SC", "heart attack")
best  <- function(state, outcome){
#Read outcome
setwd( "/Users/gabrielsoares/Documents/Curso Data Analysis/rprog-data-ProgAssignment3-data")
hospital_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
#state list
state_list <- unique(hospital_data[,7])
#outcome list
outcome_list  <- c("heart attack","heart failure", "pneumonia")
#checking variables
if (!state %in% state_list){
stop(print("invalid state"))
}
else if (!outcome %in% outcome_list){
stop(print("invalid outcome"))
}
#filtering hospital dataset by state name
hospital_filtered  <- subset(hospital_data, State == state)
if (outcome == "heart attack") {
outcome_column <- 11
}
else if (outcome == "heart failure") {
outcome_column <- 17
}
else if (outcome == "pneumonia") {
outcome_column <- 23
}
#taking out NA values for the column
column_desired  <- as.numeric(hospital_filtered[, outcome_column])
is_Na <- is.na(column_desired)
desired_hospital_filtered <- hospital_filtered[!is_Na,]
#find the hospitals in the rows with the minimum outcome value
columns_considered <- as.numeric(desired_hospital_filtered[, outcome_column])
desired_rows <- which(columns_considered == min(columns_considered))
desired_hospitals <- desired_hospital_filtered[desired_rows, 2]
#if there are multiple hospitals with the minimum outcome value, then
#return the first hospital name from the alphabetically sorted hospital
#names list
if (length(desired_hospitals) > 1) {
hospitals_sorted <- sort(desired_hospitals)
hospitals_sorted[1]
}
else {
desired_hospitals
}
}
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
setwd( "/Users/gabrielsoares/Documents/Curso Data Analysis/rprog-data-ProgAssignment3-data")
hospital_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
subset(hospital_data, hospital_data[,11])
subset(hospital_data, hospital_data[11])
hospital_data[11]
head(hospital_data[11])
subset(hospital_data, state)
subset(hospital_data, hospital_data$State)
column_desired  <- as.numeric(hospital_filtered[, outcome_column])
is_Na <- is.na(column_desired)
desired_hospital_filtered <- hospital_filtered[!is_Na,]
column_desired  <- as.numeric(hospital_data[, 11])
is_Na <- is.na(column_desired)
desired_hospital_filtered <- hospital_data[!is_Na,]
desired_hospital_filtered[,11]  <- sapply(desired_hospital_filtered[,11], as.numeric)
desired_hospitals_ordered  <- desired_hospital_filtered[with(desired_hospital_filtered,order(desired_hospital_filtered[11],desired_hospital_filtered[2])),]
View(desired_hospitals_ordered)
rankall <- function(outcome, num = "best") {
#Read outcome
setwd( "/Users/gabrielsoares/Documents/Curso Data Analysis/rprog-data-ProgAssignment3-data")
hospital_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
#outcome list
outcome_list  <- c("heart attack","heart failure", "pneumonia")
#checking variables
#first, state
if (!state %in% state_list){
stop(print("invalid state"))
}
#second, outcome
else if (!outcome %in% outcome_list){
stop(print("invalid outcome"))
}
if (outcome == "heart attack") {
outcome_column <- 11
}
else if (outcome == "heart failure") {
outcome_column <- 17
}
else if (outcome == "pneumonia") {
outcome_column <- 23
}
#taking out NA values for the column
column_desired  <- as.numeric(hospital_data[, outcome_column])
is_Na <- is.na(column_desired)
desired_hospital_filtered <- hospital_data[!is_Na,]
#converting to a numeric to order
desired_hospital_filtered[,outcome_column]  <- sapply(desired_hospital_filtered[,outcome_column], as.numeric)
#find the hospitals in the rows with the minimum outcome value
columns_considered <- as.numeric(desired_hospital_filtered[, outcome_column])
columns_names  <- as.character(desired_hospital_filtered[, 2])
desired_hospitals_ordered  <- desired_hospital_filtered[with(desired_hospital_filtered,order(desired_hospital_filtered[outcome_column],desired_hospital_filtered[2])),]
#if there are multiple hospitals with the minimum outcome value, then
#return the first hospital name from the alphabetically sorted hospital
#names list
if (num == "best") {
desired_hospitals_ordered[1,2]
}
else if (num == "worst") {
desired_hospitals_ordered[length(desired_hospitals_ordered[,outcome_column]),2]
}
else {
desired_hospitals_ordered[num,2]
}
}
rankall("heart attack", 20)
rankall <- function(outcome, num = "best") {
#Read outcome
setwd( "/Users/gabrielsoares/Documents/Curso Data Analysis/rprog-data-ProgAssignment3-data")
hospital_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
#outcome list
outcome_list  <- c("heart attack","heart failure", "pneumonia")
#checking variables
}
#second, outcome
else if (!outcome %in% outcome_list){
rankall <- function(outcome, num = "best") {
#Read outcome
setwd( "/Users/gabrielsoares/Documents/Curso Data Analysis/rprog-data-ProgAssignment3-data")
hospital_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
#outcome list
outcome_list  <- c("heart attack","heart failure", "pneumonia")
#checking variables
if (!outcome %in% outcome_list){
stop(print("invalid outcome"))
}
if (outcome == "heart attack") {
outcome_column <- 11
}
else if (outcome == "heart failure") {
outcome_column <- 17
}
else if (outcome == "pneumonia") {
outcome_column <- 23
}
#taking out NA values for the column
column_desired  <- as.numeric(hospital_data[, outcome_column])
is_Na <- is.na(column_desired)
desired_hospital_filtered <- hospital_data[!is_Na,]
#converting to a numeric to order
desired_hospital_filtered[,outcome_column]  <- sapply(desired_hospital_filtered[,outcome_column], as.numeric)
#find the hospitals in the rows with the minimum outcome value
columns_considered <- as.numeric(desired_hospital_filtered[, outcome_column])
columns_names  <- as.character(desired_hospital_filtered[, 2])
desired_hospitals_ordered  <- desired_hospital_filtered[with(desired_hospital_filtered,order(desired_hospital_filtered[outcome_column],desired_hospital_filtered[2])),]
#if there are multiple hospitals with the minimum outcome value, then
#return the first hospital name from the alphabetically sorted hospital
#names list
if (num == "best") {
desired_hospitals_ordered[1,2]
}
else if (num == "worst") {
desired_hospitals_ordered[length(desired_hospitals_ordered[,outcome_column]),2]
}
else {
desired_hospitals_ordered[num,2]
}
}
rankall("heart attack", 20)
View(hospital_data)
View(desired_hospital_filtered)
View(desired_hospitals_ordered)
desired_hospitals_ordered  <- desired_hospital_filtered[with(desired_hospital_filtered,order(desired_hospital_filtered[outcome_column],desired_hospital_filtered[7])),]
desired_hospitals_ordered  <- desired_hospital_filtered[with(desired_hospital_filtered,order(desired_hospital_filtered[11],desired_hospital_filtered[7])),]
View(desired_hospitals_ordered)
View(desired_hospitals_ordered)
desired_hospitals_ordered  <- desired_hospital_filtered[with(desired_hospital_filtered,order(desired_hospital_filtered[7],desired_hospital_filtered[11])),]
View(desired_hospitals_ordered)
setwd( "/Users/gabrielsoares/Documents/Curso Data Analysis/rprog-data-ProgAssignment3-data")
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
fd   <- as.data.frame(cbind(data[, 2],  # hospital
data[, 7],  # state
data[, 11],  # heart attack
data[, 17],  # heart failure
data[, 23]), # pneumonia
stringsAsFactors = FALSE)
colnames(fd) <- c("hospital", "state", "heart attack", "heart failure", "pneumonia")
fd[, eval(outcome)] <- as.numeric(fd[, eval(outcome)])
View(fd)
by_state <- with(fd, split(fd, state))
ordered  <- list()
seq_along(by_state)
head(by_state)
seq_along(by_state)
by_state <- with(fd, split(fd, state))
for (i in seq_along(by_state)){
by_state[[i]] <- by_state[[i]][order(by_state[[i]][, eval(outcome)],
by_state[[i]][, "hospital"]), ]
ordered[[i]]  <- c(by_state[[i]][1, c("hospital", "state")])
}
for (i in seq_along(by_state)){
by_state[[i]] <- by_state[[i]][order(by_state[[i]][, eval("heart attack")],
by_state[[i]][, "hospital"]), ]
ordered[[i]]  <- c(by_state[[i]][1, c("hospital", "state")])
}
fd[, eval(outcome)] <- as.numeric(fd[, eval(outcome)])
fd[, eval(outcome)] <- as.numeric(fd[, eval("heart attack")])
fd[, eval("heart attack")] <- as.numeric(fd[, eval("heart attack")])
rankall <- function(outcome, num = "best"){
## Read outcome data
setwd( "/Users/gabrielsoares/Documents/Curso Data Analysis/rprog-data-ProgAssignment3-data")
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
fd   <- as.data.frame(cbind(data[, 2],  # hospital
data[, 7],  # state
data[, 11],  # heart attack
data[, 17],  # heart failure
data[, 23]), # pneumonia
stringsAsFactors = FALSE)
colnames(fd) <- c("hospital", "state", "heart attack", "heart failure", "pneumonia")
fd[, eval(outcome)] <- as.numeric(fd[, eval(outcome)])
## Check that state and outcome are valid
if (!outcome %in% c("heart attack", "heart failure", "pneumonia")){
stop('invalid outcome')
} else if (is.numeric(num)) {
by_state <- with(fd, split(fd, state))
ordered  <- list()
for (i in seq_along(by_state)){
by_state[[i]] <- by_state[[i]][order(by_state[[i]][, eval(outcome)],
by_state[[i]][, "hospital"]), ]
ordered[[i]]  <- c(by_state[[i]][num, "hospital"], by_state[[i]][, "state"][1])
}
result <- do.call(rbind, ordered)
output <- as.data.frame(result, row.names = result[, 2], stringsAsFactors = FALSE)
names(output) <- c("hospital", "state")
} else if (!is.numeric(num)) {
if (num == "best") {
by_state <- with(fd, split(fd, state))
ordered  <- list()
for (i in seq_along(by_state)){
by_state[[i]] <- by_state[[i]][order(by_state[[i]][, eval(outcome)],
by_state[[i]][, "hospital"]), ]
ordered[[i]]  <- c(by_state[[i]][1, c("hospital", "state")])
}
result <- do.call(rbind, ordered)
output <- as.data.frame(result, stringsAsFactors = FALSE)
rownames(output) <- output[, 2]
} else if (num == "worst") {
by_state <- with(fd, split(fd, state))
ordered  <- list()
for (i in seq_along(by_state)){
by_state[[i]] <- by_state[[i]][order(by_state[[i]][, eval(outcome)],
by_state[[i]][, "hospital"],
decreasing = TRUE), ]
ordered[[i]]  <- c(by_state[[i]][1, c("hospital", "state")])
}
result <- do.call(rbind, ordered)
output <- as.data.frame(result, stringsAsFactors = FALSE)
rownames(output) <- output[, 2]
} else {
stop('invalid num')
}
}
return(output)
}
rankall("heart attack", 20
)
rankall <- function(outcome, num = "best") {
## Read outcome data
## Check that state and outcome are valid
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
#read in the desired data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
#create a list of states and initialize a character array to hold the
#required hospital names
state <- levels(factor(data[, 7]))
hospital <- vector(mode="character")
for (i in seq(state)) {
hospital[i] <- rankhospital(state[i], outcome, num)
}
data.frame(hospital, state)
}
rankall("heart attack", 20)
